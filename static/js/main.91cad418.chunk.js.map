{"version":3,"sources":["CharacterInput/CharacterInput.js","CharacterData/CharacterData.js","App.js","serviceWorker.js","index.js"],"names":["CharacterInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideModal","setState","show","showModal","addCharacterId","event","isNaN","target","value","localStorage","setItem","state","id","getItem","react_default","a","createElement","Fragment","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","onSubmit","Body","className","type","Footer","React","Component","CharacterData","results","Error","src","Character","Avatar","alt","FreeCompany","Name","newProps","oldState","App","JSON","parse","characterId","_this2","fetch","concat","then","res","json","result","stringify","isLoaded","error","src_CharacterInput_CharacterInput","src_CharacterData_CharacterData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91cad418.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './CharacterInput.css';\r\n\r\nclass CharacterInput extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n      this.state = {\r\n        id: localStorage.getItem('characterId'),\r\n        show: false\r\n      }\r\n     }\r\n\r\n  componentDidMount() {\r\n  if (localStorage.getItem('characterId') === null) {\r\n    this.setState({\r\n      show: true,\r\n    });\r\n  }\r\n  }\r\n\r\nhideModal = () => {\r\n  this.setState({\r\n    show: false\r\n  })\r\n}\r\n\r\nshowModal = () => {\r\n  this.setState({\r\n    show: true\r\n  })\r\n}\r\n\r\naddCharacterId = (event) => {\r\n  if (isNaN(event.target[0].value)) {\r\n    return null\r\n  } else {\r\n  localStorage.setItem('characterId', event.target[0].value)\r\n}\r\n}\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <Button variant=\"primary\" onClick={this.showModal}>\r\n          Select Character\r\n        </Button>\r\n\r\n        <Modal show={this.state.show} onHide={this.hideModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Enter Character ID</Modal.Title>\r\n          </Modal.Header>\r\n          <form onSubmit={this.addCharacterId}>\r\n            <Modal.Body>\r\n            <div className=\"form-group\">\r\n              It may take a few seconds to update the page<br/>\r\n              Entry must be valid lodestone ID\r\n              <input type=\"text\" className=\"form-control\" />\r\n            </div>\r\n            </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.hideModal}>\r\n              Close\r\n            </Button>\r\n            <input className=\"btn btn-success\" type=\"submit\" value=\"Submit\"/>\r\n          </Modal.Footer>\r\n          </form>\r\n        </Modal>\r\n      </>\r\n    );\r\n}\r\n}\r\n\r\nexport default CharacterInput;\r\n","import React from 'react';\r\nimport './CharacterData.css';\r\n\r\nclass CharacterData extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      id: localStorage.getItem('characterId'),\r\n      results: this.props.results,\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(newProps, oldState) {\r\n    if (newProps.results === oldState.results) {\r\n      return null;\r\n    }\r\n    return {\r\n      results: newProps.results,\r\n    };\r\n  }\r\n\r\n  render(){\r\n    if (!this.state.results || this.state.results.Error === true) {\r\n      return null\r\n    } else {\r\n  return (\r\n    <div>\r\n    <img src={this.state.results.Character.Avatar} alt=\"Avatar\"/>\r\n    <ul>\r\n      <li>Free Company: {this.state.results.FreeCompany.Name}</li>\r\n    </ul>\r\n    </div>\r\n  );\r\n}}\r\n}\r\n\r\nexport default CharacterData;\r\n","import React from 'react';\nimport CharacterInput from './CharacterInput/CharacterInput';\nimport CharacterData from './CharacterData/CharacterData';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      results: JSON.parse(localStorage.getItem('results')),\n      characterId: JSON.parse(localStorage.getItem('characterId')),\n    }\n    }\n\n  componentDidMount() {\n    if (!localStorage.getItem('characterId')) {\n      localStorage.setItem('characterId', null)\n    }\n    if (this.state.results !== JSON.parse(localStorage.getItem('results'))) {\n    fetch(`https://xivapi.com/character/${localStorage.getItem('characterId')}?data=AC,FR,FC,FCM,PVP`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        localStorage.setItem('results', JSON.stringify(result))\n        this.setState({\n          isLoaded: true,\n          results: JSON.parse(localStorage.getItem('results'))\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )}\n\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <CharacterInput />\n      <CharacterData results={this.state.results}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}